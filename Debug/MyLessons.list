
MyLessons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000250  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000400  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000400  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000926  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000209  00000000  00000000  00010d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000080  00000000  00000000  00010f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  00010fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018185  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000965  00000000  00000000  000291bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087b6d  00000000  00000000  00029b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b168f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  000b170c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003e0 	.word	0x080003e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003e0 	.word	0x080003e0

080001e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <SystemInit+0x28>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <SystemInit+0x28>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <SystemInit+0x28>)
 80001fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000202:	609a      	str	r2, [r3, #8]
#endif
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <main>:
void GpioInit(void);
void RccInit(void);


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	RccInit();
 8000218:	f000 f85a 	bl	80002d0 <RccInit>

	GpioInit();
 800021c:	f000 f810 	bl	8000240 <GpioInit>


	while(1)
	{

		GPIOA->BSRR|=GPIO_BSRR_BR7;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <main+0x28>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <main+0x28>)
 8000226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800022a:	6193      	str	r3, [r2, #24]
		GPIOA->BSRR|=GPIO_BSRR_BS6;
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <main+0x28>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a02      	ldr	r2, [pc, #8]	; (800023c <main+0x28>)
 8000232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000236:	6193      	str	r3, [r2, #24]
		GPIOA->BSRR|=GPIO_BSRR_BR7;
 8000238:	e7f2      	b.n	8000220 <main+0xc>
 800023a:	bf00      	nop
 800023c:	40020000 	.word	0x40020000

08000240 <GpioInit>:
}



void GpioInit(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000244:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <GpioInit+0x88>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a1f      	ldr	r2, [pc, #124]	; (80002c8 <GpioInit+0x88>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOCEN;
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <GpioInit+0x88>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a1c      	ldr	r2, [pc, #112]	; (80002c8 <GpioInit+0x88>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6313      	str	r3, [r2, #48]	; 0x30

	/*PIN6*/
	GPIOA->MODER|=GPIO_MODER_MODE6_0;
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <GpioInit+0x8c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <GpioInit+0x8c>)
 8000262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER|=GPIO_OTYPER_OT6;
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <GpioInit+0x8c>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4a17      	ldr	r2, [pc, #92]	; (80002cc <GpioInit+0x8c>)
 800026e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000272:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR|=GPIO_PUPDR_PUPD6_0;
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <GpioInit+0x8c>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <GpioInit+0x8c>)
 800027a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800027e:	60d3      	str	r3, [r2, #12]
	GPIOA->BSRR|=GPIO_BSRR_BS6;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <GpioInit+0x8c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <GpioInit+0x8c>)
 8000286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800028a:	6193      	str	r3, [r2, #24]

	/*PIN7*/

	GPIOA->MODER|=GPIO_MODER_MODE7_0;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <GpioInit+0x8c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <GpioInit+0x8c>)
 8000292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER|=GPIO_OTYPER_OT7;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <GpioInit+0x8c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <GpioInit+0x8c>)
 800029e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a2:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR|=GPIO_PUPDR_PUPD7_0;
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <GpioInit+0x8c>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a08      	ldr	r2, [pc, #32]	; (80002cc <GpioInit+0x8c>)
 80002aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ae:	60d3      	str	r3, [r2, #12]
	GPIOA->BSRR|=GPIO_BSRR_BS7;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <GpioInit+0x8c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <GpioInit+0x8c>)
 80002b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ba:	6193      	str	r3, [r2, #24]

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000

080002d0 <RccInit>:


void RccInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

RCC->CR|=RCC_CR_HSEON;                   //включение внешнего кварца
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <RccInit+0x6c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a18      	ldr	r2, [pc, #96]	; (800033c <RccInit+0x6c>)
 80002da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002de:	6013      	str	r3, [r2, #0]
while(!(RCC->CR & RCC_CR_HSERDY));       //флаг готовности HSERDY
 80002e0:	bf00      	nop
 80002e2:	4b16      	ldr	r3, [pc, #88]	; (800033c <RccInit+0x6c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <RccInit+0x12>
FLASH->ACR|=FLASH_ACR_LATENCY_5WS;     	 //задержка для флэш памяти
 80002ee:	4b14      	ldr	r3, [pc, #80]	; (8000340 <RccInit+0x70>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a13      	ldr	r2, [pc, #76]	; (8000340 <RccInit+0x70>)
 80002f4:	f043 0305 	orr.w	r3, r3, #5
 80002f8:	6013      	str	r3, [r2, #0]
RCC->CFGR|=RCC_CFGR_SW_HSE;			     //Внешний кварц выбран в качестве системной частоты
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <RccInit+0x6c>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <RccInit+0x6c>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6093      	str	r3, [r2, #8]
while(!(RCC->CFGR &= RCC_CFGR_SWS_HSE)); //Проверка тактирования от внешнего кварца
 8000306:	bf00      	nop
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <RccInit+0x6c>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <RccInit+0x6c>)
 800030e:	f003 0304 	and.w	r3, r3, #4
 8000312:	6093      	str	r3, [r2, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f7      	beq.n	8000308 <RccInit+0x38>


//Вывод частот на пины
//MCO1-HSE (PA8)
RCC->CFGR|=RCC_CFGR_MCO1_1; //Выбор HSE
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <RccInit+0x6c>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <RccInit+0x6c>)
 800031e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000322:	6093      	str	r3, [r2, #8]

//MCO2-System clock (PC9)
RCC->CFGR&= ~RCC_CFGR_MCO2; //Выбор SYSCLK
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <RccInit+0x6c>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <RccInit+0x6c>)
 800032a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800032e:	6093      	str	r3, [r2, #8]

}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40023c00 	.word	0x40023c00

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000348:	f7ff ff4e 	bl	80001e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 f811 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff4d 	bl	8000214 <main>

0800037a <LoopForever>:

LoopForever:
    b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000388:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 800038c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000390:	2000001c 	.word	0x2000001c

08000394 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	4e0d      	ldr	r6, [pc, #52]	; (80003d0 <__libc_init_array+0x38>)
 800039c:	4c0d      	ldr	r4, [pc, #52]	; (80003d4 <__libc_init_array+0x3c>)
 800039e:	1ba4      	subs	r4, r4, r6
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	2500      	movs	r5, #0
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	4e0b      	ldr	r6, [pc, #44]	; (80003d8 <__libc_init_array+0x40>)
 80003aa:	4c0c      	ldr	r4, [pc, #48]	; (80003dc <__libc_init_array+0x44>)
 80003ac:	f000 f818 	bl	80003e0 <_init>
 80003b0:	1ba4      	subs	r4, r4, r6
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	2500      	movs	r5, #0
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003c0:	4798      	blx	r3
 80003c2:	3501      	adds	r5, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ca:	4798      	blx	r3
 80003cc:	3501      	adds	r5, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
